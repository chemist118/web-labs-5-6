{"remainingRequest":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\otino\\Desktop\\WEB56\\Client\\src\\components\\views\\DescriptionPage.vue?vue&type=style&index=0&id=5711b3ec&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\src\\components\\views\\DescriptionPage.vue","mtime":1607003230132},{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\otino\\Desktop\\WEB56\\Client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmxhYmVsIHsKICAgIGZsb2F0OiBsZWZ0Owp9CgpidXR0b24gewogICAgZmxvYXQ6IGxlZnQ7Cn0KCi5jb250YWluZXIgewogICAgbWluLWhlaWdodDogY2FsYyg3MDBweCAtIDV2aCAtIDNyZW0pOwogICAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSA0MHZ3KTsKfQoKLmFsZXJ0IHsKICAgIG1hcmdpbi1ib3R0b206IDA7Cn0KCi5mb3JtLWdyb3VwIHsKICAgIG1hcmdpbi1ib3R0b206IDEuMjVyZW07Cn0KCi5jYXJkLWJvZHkgewogICAgcGFkZGluZzogMS4yNXJlbSAwIDEuMjVyZW0gMDsKfQoKLm15LWNvbW1lbnQgewogICAgbWFyZ2luLXRvcDogMS41cmVtOwogICAgcGFkZGluZzogMS4yNXJlbSAwIDAgMDsKfQoK"},{"version":3,"sources":["DescriptionPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"DescriptionPage.vue","sourceRoot":"src/components/views","sourcesContent":["<template>\n    <form class=\"container w-100 mx-auto\">\n        <h4 class=\"alert alert-info text-center\">Информация по задаче</h4>\n\n        <form class=\"card-body\">\n            <b-alert class=\"alert alert-danger\"\n                     :show=\"dismissCountDown\"\n                     @dismissed=\"dismissCountDown=0\"\n                     @dismiss-count-down=\"countDownChanged\">\n                {{ getError }}\n            </b-alert>\n\n            <Loader v-if=\"loading\"></Loader>\n            <form v-else @submit.prevent=\"onSubmit\">\n                <div class=\"form-group\">\n                    <label for=\"title-input\">Заголовок:</label>\n                    <input type=\"text\" name=\"title\" class=\"form-control\" id=\"title-input\" placeholder=\"Заголовок\"\n                           v-model=\"title\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"description-input\">Описание:</label>\n                    <input type=\"text\" name=\"description\" class=\"form-control\" id=\"description-input\"\n                           placeholder=\"Описание\"\n                           v-model=\"description\">\n\n                </div>\n                <div class=\"form-group\">\n                    <label>Статус:</label>\n                    <select v-model=\"completed\" class=\"form-control for-margin\" aria-label=\"Basic example\">\n                        <option value=\"true\" selected>Завершенная</option>\n                        <option value=\"false\">Незавершенная</option>\n                    </select>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary text-center\">Обновить</button>\n\n            </form>\n\n        </form>\n\n        <Loader v-if=\"loading\"></Loader>\n        <form v-else class=\"card-body my-comment\">\n            <CommentList :comments=\"comments\"/>\n        </form>\n\n    </form>\n</template>\n\n<script>\n    import Loader from '@/components/Loader.vue'\n    import CommentList from '@/components/CommentList.vue'\n    import CommentItem from '@/components/CommentItem.vue'\n\n    export default {\n        name: \"GetTodoDescription\",\n        data() {\n            return {\n                comments: [],\n                title: '',\n                description: '',\n                completed: false,\n                id: Number(this.$route.params.id),\n                loading: true,\n                seen: false,\n                dismissSecs: 3,\n                dismissCountDown: 0\n            }\n        },\n        components: {\n            Loader,\n            CommentList,\n            CommentItem\n        },\n        computed: {\n            getTodo() {\n                return this.$store.getters.TODO;\n            },\n            todoList() {\n                return this.$store.getters.TODOS;\n            },\n            getError() {\n                return this.$store.getters.editError;\n            },\n            getUser() {\n                return this.$store.getters.user;\n            },\n        },\n        async created() {\n            await this.$store.dispatch('SET_ERROR', {type: 'add', error: null});\n            if (this.todoList.length === 0) {\n                await this.$store.dispatch('FETCH_TODOS', {id: this.getUser.id });\n            }\n            console.log(this.todoList);\n            if (this.todoList.find(t => t.id === this.id)) {\n                const todo = this.todoList.find(t => t.id === this.id);\n                await this.$store.dispatch('SET_TODO', todo);\n                this.title = todo.title;\n                this.description = todo.description;\n                this.completed = todo.completed;\n                await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${this.id}&_limit=4`)\n                    .then(response => response.json())\n                    .then(json => {\n                        this.comments = json;\n                        this.loading = false;\n                    });\n                await this.$store.dispatch('SET_ERROR', {type: 'edit', error: null});\n            } else {\n                await this.$store.dispatch('SET_ERROR', {type: 'add', error: 'Task does not exist'});\n                await this.$router.push({path: '/todos'});\n            }\n        },\n        methods: {\n            countDownChanged(dismissCountDown) {\n                this.dismissCountDown = dismissCountDown\n            },\n            showAlert() {\n                this.dismissCountDown = this.dismissSecs\n            },\n            async onSubmit() {\n                const title = this.title === undefined ? '' : this.title.trim();\n                const description = this.description === undefined ? '' : this.description.trim();\n\n                this.loading = true;\n                await fetch(`/api/todos/${this.getTodo.id}`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        user_id: this.getTodo.user_id,\n                        title: title,\n                        description: description,\n                        completed: this.completed\n                    }),\n                    headers: {\n                        \"Content-type\": \"application/json; charset=UTF-8\"\n                    }\n                })\n                    .then(response => {\n                        if (response.status === 200) {\n                            response.json()\n                                .then(json => {\n                                    this.$store.dispatch('SET_ERROR', {type: 'edit', error: null});\n                                    this.$store.dispatch('EDIT_TODO', {\n                                        idx: this.todoList.indexOf(this.getTodo),\n                                        todo: JSON.parse(json)\n                                    });\n\n                                    this.$router.push({path: '/todos'});\n                                });\n                        } else {\n                            response.json()\n                                .then(json => {\n                                    this.$store.dispatch('SET_ERROR', {type: 'edit', error: json.error});\n                                    this.showAlert();\n                                });\n                        }\n                    })\n                    .catch(error => {\n                        this.$store.dispatch('SET_ERROR', {type: 'edit', error: error});\n                        this.showAlert();\n                    });\n                this.loading = false;\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n    label {\n        float: left;\n    }\n\n    button {\n        float: left;\n    }\n\n    .container {\n        min-height: calc(700px - 5vh - 3rem);\n        max-width: calc(100% - 40vw);\n    }\n\n    .alert {\n        margin-bottom: 0;\n    }\n\n    .form-group {\n        margin-bottom: 1.25rem;\n    }\n\n    .card-body {\n        padding: 1.25rem 0 1.25rem 0;\n    }\n\n    .my-comment {\n        margin-top: 1.5rem;\n        padding: 1.25rem 0 0 0;\n    }\n\n</style>"]}]}